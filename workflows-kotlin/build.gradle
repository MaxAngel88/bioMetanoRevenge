apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

jar.baseName = "bioMetanoRevenge-workflows"

cordapp {
    targetPlatformVersion corda_platform_version.toInteger()
    minimumPlatformVersion corda_platform_version.toInteger()
    workflow {
        name "CorDapp bioMetanoRevenge workflows"
        vendor "Corda Open Source"
        licence "Apache License, Version 2.0"
        versionId 1
    }
}

sourceSets {
    main {
        resources {
            srcDir "../config/dev"
        }
    }
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "junit:junit:$junit_version"

    // Corda dependencies.
    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"
    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    testImplementation "$corda_release_group:corda-node-driver:$corda_release_version"
    cordaRuntime "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"

    // CorDapp dependencies.
    cordapp project(":contracts-kotlin")
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        languageVersion = "1.2"
        apiVersion = "1.2"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        cordapp project(":contracts-kotlin")
    }
    node {
        name "O=Notary,L=Milan,C=IT"
        notary = [validating : false]
        p2pAddress "localhost:10000"
        rpcSettings {
            address("0.0.0.0:10001")
            adminAddress("0.0.0.0:10002")
        }
        projectCordapp {
            deploy = false
        }
        cordapps.clear()
    }
    node {
        name "O=Produttore,L=Milan,C=IT"
        p2pAddress "localhost:10004"
        rpcSettings {
            address("0.0.0.0:10005")
            adminAddress("0.0.0.0:10006")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Shipper,L=Milan,C=IT"
        p2pAddress "localhost:10008"
        rpcSettings {
            address("0.0.0.0:10009")
            adminAddress("0.0.0.0:10010")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Intermediario,L=Milan,C=IT"
        p2pAddress "localhost:10012"
        rpcSettings {
            address("0.0.0.0:10013")
            adminAddress("0.0.0.0:10014")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Distributore,L=Milan,C=IT"
        p2pAddress "localhost:10016"
        rpcSettings {
            address("0.0.0.0:10017")
            adminAddress("0.0.0.0:10018")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=GSE,L=Milan,C=IT"
        p2pAddress "localhost:10020"
        rpcSettings {
            address("0.0.0.0:10021")
            adminAddress("0.0.0.0:10022")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}
